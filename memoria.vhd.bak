library ieee;
use ieee.std_logic_1164.all;

ENTITY memoria is
port(	clk: in std_logic;
		reset: in std_logic;
		read: in std_logic;
		write: in std_logic;
		address: in std_logic_vector(4 downto 0);
		I: in std_logic_vector(7 downto 0);
		Q: out std_logic_vector(7 downto 0)
);
END memoria; 

ARCHITECTURE comportamento OF memoria IS

type array_memoria is array (0 to 16) of std_logic_vector(7 downto 0);

signal mem: array_memoria;

  constant OPNOP:	std_logic_vector(7 downto 0) := "00000000";
  constant OPSTA:	std_logic_vector(7 downto 0) := "00010000";
  constant OPLDA:	std_logic_vector(7 downto 0) := "00100000";
  constant OPADD:	std_logic_vector(7 downto 0) := "00110000";
  constant OPOR:	std_logic_vector(7 downto 0) := "01000000";
  constant OPAND:	std_logic_vector(7 downto 0) := "01010000";
  constant OPNOT:	std_logic_vector(7 downto 0) := "01100000";
  constant OPJMP:	std_logic_vector(7 downto 0) := "10000000";
  constant OPJN:	std_logic_vector(7 downto 0) := "10010000";
  constant OPJZ:	std_logic_vector(7 downto 0) := "10100000";
  constant OPHLT:	std_logic_vector(7 downto 0) := "11110000";

BEGIN

memoria: process(clk, reset)
    variable i: integer;
  begin

    if (reset='1') then
      	mem(0) <= OPLDA;
		mem(1) <= x"1F";
		mem(2) <= OPSTA;
		mem(3) <= x"1E";
		mem(4) <= OPADD;
		mem(5) <= x"1E";
		mem(6) <= OPJMP;
		mem(7) <= x"04";
		mem(8) <= x"00";
		mem(9) <= x"00";
		mem(10) <= x"00";
		mem(11) <= x"00";
		mem(12) <= x"00";
		mem(13) <= x"00";
		mem(14) <= x"00";
		mem(15) <= x"23";
		
    elsif (rising_edge(clk)) then

      if (write = '1') then
			case address is
			when "0000" => mem(0) <= I;
			when "0001" => mem(1) <= I;
			when "0010" => mem(2) <= I;
			when "0011" => mem(3) <= I;
			when "0100" => mem(4) <= I;
			when "0101" => mem(5) <= I;
			when "0110" => mem(6) <= I;
			when "0111" => mem(7) <= I;
			when "1000" => mem(8) <= I;
			when "1001" => mem(9) <= I;
			when "1010" => mem(10) <= I;
			when "1011" => mem(11) <= I;
			when "1100" => mem(12) <= I;
			when "1101" => mem(13) <= I;
			when "1110" => mem(14) <= I;
			when "1111" => mem(15) <= I;
			when others => mem(0) <= I;
			end case;
      end if;
      
    end if;
  end process memoria; 

   Q <=	mem(0) when address="00000" else
                mem(1) when address="0001" else
                mem(2) when address="0010" else
                mem(3) when address="0011" else
                mem(4) when address="0100" else
                mem(5) when address="0101" else
                mem(6) when address="0110" else
                mem(7) when address="0111" else
                mem(8) when address="1000" else
                mem(9) when address="1001" else
                mem(10) when address="1010" else
                mem(11) when address="1011" else
                mem(12) when address="1100" else
                mem(13) when address="1101" else
                mem(14) when address="1110" else
                mem(15) when address="1111" else
		        mem(0);


end	comportamento;

